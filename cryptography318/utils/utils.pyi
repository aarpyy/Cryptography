from typing import Optional, Iterable, Sequence, Callable, Any

_R = tuple[int | '_R', ...]

def binary_search(a: Sequence, key: Any, *, start: int = ..., end: int|None = ..., exist: bool = ...) -> int|None:...
def smooth_factor(n: int, factors: Sequence[int]) -> Optional[list[int]]: ...
def eval_power(exp: Iterable[int], primes: Iterable[int]) -> int: ...
def from_base(lst: Iterable[int], base: int) -> int: ...
def extended_gcd(*args: int) -> tuple[int]: ...
def n_digits(n: int) -> int: ...
def where(iterable: Iterable, cond: Callable = ...) -> _R: ...
def shape(o: Sequence | int | float) -> tuple: ...
def trailing(x: int) -> int: ...
def as_int(x: Any) -> int: ...
