from collections import UserList
from collections.abc import Generator
from cryptography318.prime.bailliepsw_helper import D_chooser as D_chooser, LucasPseudoPrime as LucasPseudoPrime

class Sieve(UserList[int]):
    data: list[int]
    def __init__(self, data: list[int] | None = ...) -> None: ...
    def search(self, n): ...
    def extend(self, n: int) -> None: ...
    def load(self, fp, overwrite: bool = ...) -> None: ...
    def primerange(self, a: int, b: int | None = ...) -> Generator[int, None, None]: ...
    @property
    def list(self): ...
    @property
    def tail(self): ...

primesieve: Sieve

def is_square(n): ...
def miller_rabin(n, k: int = ..., *, details: dict | None = ...): ...
def miller_rabin_bases(bases, n, *, details: dict | None = ...): ...
def baillie_psw(n, mr: bool = ..., details: dict | None = ...): ...
def known_prime(n): ...
def isprime(n, *, details: dict | None = ...): ...
def randprime(a: int, b: int = ...): ...
def confirm_prime(n): ...
def next_prime(n): ...
def prev_prime(n): ...
def sqrt_mod(a, p): ...
def lift_sqrt(root, n, modulus, q: int | None = ...): ...
def quadratic_residue(a, p): ...
def quadratic_non_residue(a, p): ...
def chinese_remainder(values, moduli): ...
