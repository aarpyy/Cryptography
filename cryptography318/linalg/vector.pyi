from collections import UserList
from typing import Iterable, Optional, overload, Iterator
from numbers import Real


class Vector(UserList[Real]):
    def __init__(self: Vector, initlist: Optional[Iterable[Real]] = ...) -> None: ...
    def __add__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __radd__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __iadd__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __sub__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __rsub__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __isub__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __mul__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __rmul__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __imul__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __truediv__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __floordiv__(self: Vector, other: Iterable[Real] | Real) -> Vector: ...
    def __mod__(self: Vector, other: Real) -> Vector: ...
    def __matmul__(self: Vector, other: Iterable[Real] | Real) -> Real: ...
    def __rmatmul__(self: Vector, other: Iterable[Real] | Real) -> Real: ...
    @overload
    def __setitem__(self: Vector, key: int, value: Real) -> None: ...
    @overload
    def __setitem__(self: Vector, key: slice, value: Iterable[Real]) -> None: ...
    def append(self: Vector, item: Real) -> None: ...
    def extend(self: Vector, other: Iterable[Real]) -> None: ...
    def insert(self: Vector, i: int, item: Real) -> None: ...

    # All of these methods are not overloaded from superclass but their return types are better known
    @overload
    def __getitem__(self: Vector, item: int) -> Real: ...
    @overload
    def __getitem__(self: Vector, item: slice) -> Vector: ...
    def pop(self: Vector, i: int = ...) -> Real: ...
    def __iter__(self: Vector) -> Iterator[Real]: ...
    def __reversed__(self: Vector) -> Iterator[Real]: ...
