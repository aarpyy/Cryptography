from numbers import *
from .expr import Add as Add, Mul as Mul
from cryptography318.numbers.factor import factor as factor
from typing import Any, Union, Literal

def normalize(operand: int, s: int = ...) -> tuple[int, int]: ...

class Sqrt(Real):
    def __new__(cls,
                radicand: Union[int, float, Rational, Sqrt, str],
                *,
                _normalize: bool = ...
                ) -> Union[Sqrt, Mul]: ...
    @property
    def eval(self) -> float: ...
    @property
    def radicand(self) -> int: ...
    @property
    def numerator(self) -> Sqrt: ...
    @property
    def denominator(self) -> Literal[1]: ...
    def __add__(self, other: Union[int, float, Sqrt, complex]) -> Union[Mul, Add, float, complex]: ...
    def __radd__(self, other: Union[int, float, Sqrt, Real, Complex]) -> Union[Mul, Add, float, complex]: ...
    def __mul__(self, other: Union[int, float, Sqrt, complex]) -> Union[Mul, Sqrt, float, complex]: ...
    def __rmul__(self, other: Union[int, float, Sqrt, Real, Complex]) -> Union[Mul, Sqrt, float, complex]: ...
    def __sub__(self, other: Union[int, float, Sqrt, complex]) -> Union[Mul, Add, float, complex]: ...
    def __rsub__(self, other: Union[int, float, Sqrt, Real, Complex]) -> Union[Mul, Add, float, complex]: ...
    def __floordiv__(self, other: Union[Sqrt, Any]) -> Union[Sqrt, Mul, float]: ...
    def __rfloordiv__(self, other: Any) -> Union[Sqrt, float]: ...
    def __truediv__(self, other: Union[int, float, Sqrt, Real, Complex]) -> Union[float, Sqrt, Mul]: ...
    def __rtruediv__(self, other: Any) -> Union[Sqrt, float]: ...
    def __mod__(self, other: Union[Sqrt, Any]) -> Union[Literal[0], Any]: ...
    def __rmod__(self, other: Any) -> Any: ...
    def __pow__(self, power: int) -> Union[int, Mul, float]: ...
    def __rpow__(self, other: Any) -> Any: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __trunc__(self) -> int: ...
    def __floor__(self) -> int: ...
    def __ceil__(self) -> int: ...
    def __round__(self, ndigits: Any | None = ...) -> Union[int, float]: ...
    def __abs__(self) -> Sqrt: ...
    def __pos__(self) -> Sqrt: ...
    def __neg__(self) -> Mul: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Union[Sqrt, Any]) -> bool: ...
    def __lt__(self, other: Union[Sqrt, Any]) -> bool: ...
    def __le__(self, other: Union[Sqrt, Any]) -> bool: ...
    def __gt__(self, other: Union[Sqrt, Any]) -> bool: ...
    def __ge__(self, other: Union[Sqrt, Any]) -> bool: ...
