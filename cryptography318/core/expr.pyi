from numbers import *
from .tools import join_dict as join_dict
from abc import ABCMeta, abstractmethod
from math import gcd as gcd, isqrt as isqrt, sqrt as sqrt
from typing import Any, Union, Literal

class Expr(metaclass=ABCMeta):
    @property
    @abstractmethod
    def eval(self) -> Union[float, int]: ...
    @abstractmethod
    def simplify(self, *, _update: bool = ...) -> Union[Expr, None]: ...
    @property
    @abstractmethod
    def gcd(self) -> int: ...
    @abstractmethod
    def __add__(self, other: Union[Expr, Real]) -> Expr: ...
    def __radd__(self, other: Union[Expr, Real]) -> Expr: ...
    def __sub__(self, other: Union[Expr, Real]) -> Expr: ...
    def __rsub__(self, other: Union[Expr, Real]) -> Expr: ...
    @abstractmethod
    def __mul__(self, other: Union[Expr, Real]) -> Expr: ...
    def __rmul__(self, other: Union[Expr, Real]) -> Expr: ...
    @abstractmethod
    def __truediv__(self, other: Union[Expr, Real]) -> Expr: ...
    @abstractmethod
    def __rtruediv__(self, other: Union[Expr, Real]) -> Expr: ...
    def __int__(self) -> int: ...
    @abstractmethod
    def __float__(self) -> float: ...
    def __complex__(self) -> complex: ...
    @abstractmethod
    def __abs__(self) -> Expr: ...
    @abstractmethod
    def __pos__(self) -> Expr: ...
    @abstractmethod
    def __neg__(self) -> Expr: ...
    @abstractmethod
    def __eq__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    @property
    def args(self) -> tuple[Union[Real, Expr], ...]: ...
    @property
    def dict(self) -> dict: ...
    @property
    def types(self) -> tuple: ...
    @property
    def numerator(self) -> Expr: ...
    @property
    def denominator(self) -> Literal[1]: ...

class Mul(Expr):
    def __init__(self, *args, _dict: dict | None = ...) -> None: ...
    @property
    def eval(self) -> Union[float, int]: ...
    def simplify(self, *, _update: bool = ...) -> Union[Mul, None]: ...
    @property
    def gcd(self) -> int: ...
    def print_dict(self) -> None: ...
    def __add__(self, other: Union[Real, Expr]) -> Expr: ...
    def __mul__(self, other: Union[Real, Expr]) -> Expr: ...
    def __truediv__(self, other: Union[int, Mul, Real, Add]) -> Mul: ...
    def __rtruediv__(self, other: Union[int, Real, Add]) -> Mul: ...
    def __float__(self) -> float: ...
    def __bool__(self) -> bool: ...
    def __abs__(self) -> Mul: ...
    def __pos__(self) -> Mul: ...
    def __neg__(self) -> Mul: ...
    def __eq__(self, other: Any) -> bool: ...

class Add(Expr):
    def __init__(self, *args, _dict: dict | None = ...) -> None: ...
    @property
    def eval(self) -> Union[float, int]: ...
    def simplify(self, *, _update: bool = ...) -> Union[Add, None]: ...
    @property
    def gcd(self) -> int: ...
    def print_dict(self) -> None: ...
    def __add__(self, other: Union[Real, Expr]) -> Expr: ...
    def __mul__(self, other: Union[Real, Expr]) -> Expr: ...
    def __truediv__(self, other: Union[int, Mul, Add]) -> Add: ...
    def __rtruediv__(self, other: Union[int, Mul, Real]) -> Add: ...
    def __float__(self) -> float: ...
    def __bool__(self) -> bool: ...
    def __abs__(self) -> Add: ...
    def __pos__(self) -> Add: ...
    def __neg__(self) -> Add: ...
    def __eq__(self, other: Any) -> bool: ...
