def StringToNum(s):
    n = ''
    for i in range(len(s) - 1, -1, -1):
        n += s[i]

    result = 0
    for i in range(len(n)):
        result += (128 ** i) * ord(n[i])
    return result


def NumToString(n):
    s = ''
    while True:
        index = 0
        while True:
            if pow(128, index) >= n:
                index -= 1
                break
            index += 1

        k = pow(128, index)
        m = n // k
        n -= m * k
        s += chr(m)
        if n == 0:
            return s


def ExtendedGCD(a, b):
    # Base Case
    if a == 0:
        return b, 0, 1

    gcd, x1, y1 = ExtendedGCD(b % a, a)

    # Update x and y using results of recursive
    # call
    x = y1 - (b // a) * x1
    y = x1

    return gcd, x, y


def Inverse(x, m):
    return ExtendedGCD(x, m)[1]

c2 = 1114121861501427347654329789397047458702244739466649313965505455544143262051012746257276977369330404278120401764504419446588908438048320056902456792504440989837342289544534632131663016421557598857151249648977316475848388831137081255986402796295140318635044811756402911956259639712229718031668723318603801882210451438162
c1 = 451630402464047715319510684529372111779909065472827188341851574305236779461687914760432719951461201931371152011524589227679109620774636051945789770741848436398593001246430300958143015226188097665555012702309113642997482793090526508797214726616003993229973378857677880495478811000027314078004142644571930267466