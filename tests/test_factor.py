from cryptography318.crypto_functions import _factorPerfectSquare, SolveDLP
from cryptography318.prime import *
from cryptography318.crypto_functions import *
from math import prod
import pytest


@pytest.mark.skip
def test_factor_perfect_square():
    factors = _factorPerfectSquare(198103, B=20)
    n = 1
    for f in factors:
        n *= pow(f, factors[f])
    assert n == 198103


@pytest.mark.skip
def test_factor_int(power=1):
    from itertools import combinations as _all

    def same_combination(lst1, lst2):
        not_same = 0
        for term in lst1:
            in_other = False
            for term1 in lst2:
                same = 0
                for t in term:
                    if t not in term1:
                        continue
                    same += 1
                if same == len(term):
                    in_other = True
                    break
            if not in_other:
                not_same += 1
        return not_same == 0

    import timeit
    p = RandomPrime(pow(10, power), pow(10, power + 1)) * RandomPrime(pow(10, power + 1), pow(10, power + 2))
    # factors = FactorInt(p)
    # assert p == prod(map(lambda b, e: pow(b, e), factors.keys(), factors.values()))
    print(timeit.timeit(lambda: QuadraticSieve(p), number=100))
    print(timeit.timeit(lambda: FactorInt(p), number=100))


def test_pollard_rho(it=50):
    for _ in range(it):
        g = 4
        p = RandomPrime(pow(2, 30))
        e = randrange(p - 1)
        h = pow(g, e, p)
        r = SolveDLP(g, h, p)
        assert pow(g, r, p) == h


def ps9():
    a = 0
    b = 1
    q1 = 5686861
    q2 = 7698853
    p = 197797557136132569017710648893651638108623930004576698686618279763624895682628487522175734861248235078206572806524434738330306949964833240505156559371612415965695510506775109364003164231581266883079085031842863560357587359412366009966241890478643599512992009771829234741006432713290388415166304819469382228183524817782423942146781835016457846686794490966854038173172759001460223004670772595668763113295666604364232657752720433079460165063357212742978662122335964873907750579
    E = EllipticCurve(a, b, p)

    P = E.point(39785476051661893860483650534493882984726168105619675238519382849442214967647692353351787857427848816124595272857912505147055991204485778873434385627702740793359759840665148068502937441424138979003320304685169287136018519942297284166885862960930171184925920219346492879512288466382601479427580829601474050610837667120073220643096337741698057640233271375694156637134402809895815411111583117166868477883712029902568409710812264966795803222624502373837604840834316396149588442,
            181380705216414607039712169343457332439581500112466891967392488215060381371936705635703696269400147435977793733531582670383086108643959029784693676248975201262859397565709234528737020113700927524612875776138220736139167098158730202646231942512630442091975083352406220930767155598817871830920835608111788831378720550330189037407801378879410291433127208853218226573068069393636157862592200644671111766652092033697954273608078803638480135971471066020424574339965901469962478033)


    Qa = E.point(49084066463305031700884101999443862903577226145910619532175784674172659315325260582564396502574768754826710231640022685139123291746924528657791309011024561772548249596803492804865919111308855254595738094922009678558263467709129365798719076277829204694006668213782624520089353330079897302792652830893226495158712129519496337671314152328604339566770910191884894182101832156143734674109306441484316144581522136029005974815399781426099399645063982382852058332290378140212328116,
   58216122631626344670787654397478026684662388363303479562689008715777960534205150309946729748388521702960147721838280453293803033141131715413037493848335909163624719805859198885473233359123438299361664972003422899994293107320089519799413146149014865334255017614242995521733077489756808066480517104573242098388194116717222628028570568367293242201745636432458065167891928221092982059285819876261088930653899319895538671532586786750328876274503546084694573389736189826468510000)

    C1 = E.point(65748001187069479075932216627749685130265531521142781283607257611913833188563869637908078853536462293688109133766692341206882406612982293457790861743975676041105013473067383680916352494215558876390453266399244229980113671948847020342518053896496318043161992276223782517429356350440615676165615035461181272898962651712945801016079893381214249202742133861623479711112552690780295598024425855197773513474162574643740660100454469010393272481516282036896346312659413936551912779,
            76376788125277995218151910394934723753866766192571401014907451214750594424989506258140614844523502030290355250587224884215845601598734772983617755841755233365162739572752429384575044801943124538628678029776973215996281289948928402436479998336956713113734175526773357814336521727962097283589912443113589659456966192594095895288805061104337294466372453588777206310042045170090993730780538643110708004331753601186448543888281678445889923624147594565632146812413195786825307971)
    C2 = E.point(61807006585418076778746079897737611572389862042254819528477511264088011371832916244245056079867550895234335791450551474555921431065045869064129352817634739885784999922558080277448925585381764305152719922733576517982707606983450254072412856335646139644124757157220737215377174007153538002063864926205945061634922606054582826066474615358605406245556192359891174128487745718785484594871924017415719380908127098057212037559961170066953646797486977686880290351882004163082341429,
            84502221597345040294786004307733534473391956974050358747276719516634324720238086914582517528032862158188775510429392275252968032453828555213817269555968083593048122813056891265067771185676879820026898944364817710275411721659261458000670856655543405917227065539456183529355295454378438751136976505497354263266783966362207751606206649831046481638995040713460987462045662071305797137045899692979239588188717158470098229496219029494193906708792391786283542921832978074703008162)

    x1 = elliptic_bsgs(P, Qa, q1)
    print(x1)
    x2 = elliptic_bsgs(P, Qa, q2)
    print(x2)
    na = ChineseRemainder([x1, x2], [q1, q2])
    M = C2 - (na * C1)
    print(EllipticToString(M))


@pytest.mark.skip
def test_all_tests():
    test_factor_perfect_square()
    test_factor_int()


if __name__ == '__main__':
    ps9()
