from cryptography318.number.crypto_functions import *
from cryptography318.number.prime import *
from cryptography318.core.tools import *


def problem_1():
    values = read_mm_int()
    m1 = string_to_int("Who controls the past controls the future. Who controls the present controls the past.\n1984")
    p = values['p']
    A_k = values['c12'] * pow(m1, -1, p)
    A = values['A']
    c22 = values['c22']

    i = 7
    A_k_i = pow(A_k, i, p)
    m = (c22 * pow(A_k_i, -1, p)) % p
    print(int_to_string(m))


def problem_2():
    values = read_mm_int()
    g = values['g']
    A = values['A']
    p = values['p']
    c1 = values['c1']
    c2 = values['c2']
    a = pollard_rho_dlp(g, A, p)
    m = (pow(c1, -a, p) * c2) % p
    print(int_to_string(m))


def problem_3():
    values = read_mm_int()
    g = values['g']
    A = values['A']
    p = values['p']
    c1 = values['c1']
    c2 = values['c2']
    q = values['q']
    d = values['d']
    a = pollard_rho_dlp(g, A, p)
    b = (pow(c1, -a, p) * c2) % p
    m = (d * pow(b, -1, q)) % q
    print(int_to_string(m))


def problem_4():
    values = read_mm_int()
    n = values['n']
    e = values['e']
    c = values['c']
    q = pollard_p1(n)
    p = n // q
    d = pow(e, -1, (p - 1) * (q - 1))
    m = pow(c, d, n)
    print(int_to_string(m))


def problem_5():
    values = read_mm_int()
    n = values['n']
    e_vals = [values[f'e{i}'] for i in range(1, 4)]
    c_vals = [values[f'c{i}'] for i in range(1, 4)]
    g, u, v, w = extended_gcd(*e_vals)
    m = prod(map(lambda c, d: pow(c, d, n), c_vals, [u, v, w])) % n
    print(int_to_string(m))


def problem_6():
    values = read_mm_int()
    p = values['p']
    q = values['q']
    n = pow(p, 2) * pow(q, 2)
    e = values['e']
    c = values['c']

    phi = p * (p - 1) * q * (q - 1)
    d = pow(e, -1, phi)
    m = pow(c, d, n)
    print(int_to_string(m))


def problem_7():
    values = read_mm_int()
    q = isqrt(values['ord'])
    E = EllipticCurve(values['a'], values['b'], values['p'])
    P = E.point
    QA = E.point
    C1 = E.point
    C2 = E.point(2123625335970817129224415409668629162560054371696385295267136815521832380032698851383209907264836177037955161107477626662679024931267321581101661195403056797911506689186248034674154087379074822920118829342697774460181602879540498232781918899790480428723045810844435371360816293997925440693726651281869514138007415328653506925499857293577049006626296401578286825719349645273419642909801979655000719212031103950350372276378046797679782708935931712021678227423052490633478460358090948058872145163458766514699404452108775985814156232261504838263452286004453531957469324071258928534191219158309305356060025741670365628698665531014600630560464735050638239975398662150347801658373274006646186232127788838487689822256456, 3864171220759223988623676848983148058083763076125398712017263862158184586179928965027188800492502335602944442568221828456374149756884066224297785280706113367808349467933306063108597736643185821745186670561624352738086648647794347688619325586769767557588948178714529655747081889558352301889540033561285702123905223817884499158588502724397283631493318005858906642286068837357720253240322847038511610781196458837678479872135508280149937013708412353471646175629200509706292340383353396785492614627274608296024388595915039488752571780225353550366454101225699114576938649536944242007743526045627676281498564935573994423197231687975404795571961895357158757177875079029158213274500043608074909518495872507467935346863913)

    # x = elliptic_bsgs(P * q, QA * q, q)
    x = 643749  # this is hard-coded to avoid re-running instance of BSGS

    # s = elliptic_bsgs(P * q, QA - P * x, q); s = 190856
    # x1 = x + s * q
    x1 = 155189665325  # this is hard-coded to avoid re-running instance of BSGS

    M = C2 - x1 * C1
    print(elliptic_to_string(M))


def problem_8():
    def alpha_to_num(s):
        return sum(map(lambda c, n: (ord(c) - 97) * n, s[::-1], map(lambda i: pow(26, i), range(len(s)))))

    def num_to_alpha(n):
        return ''.join(map(lambda v: chr(v + 97), to_base(n, 26)[::-1]))

    assert (n := alpha_to_num("hithere")) == 2266270166 and num_to_alpha(n) == "hithere"

    frequencies = [.082, .015, .028, .043, .127, .022, .020, .061, .070, .002, .008, .040, .024, .067, .075, .019,
                   .001, .060, .063, .091, .028, .010, .023, .001, .020, .001]

    def get_freq(s):
        curr_freq = Array([0] * 26)
        for c in s:
            n = ord(c) - 97
            curr_freq[n] += 1
        return dot(frequencies, curr_freq / len(s))

    values = read_mm_int()

    c = values['c']
    p = values['p']

    for a in range(pow(10, 4), pow(10, 5)):
        m = (c * pow(a, -1, p)) % p
        if abs(get_freq(num_to_alpha(m)) - 0.065) < .005:
            print(a)
            print(num_to_alpha(m))
            break
