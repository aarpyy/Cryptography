from crypto_functions import *

g = 3131774388027604248392126512036200508815802995558946818724459992165440161070717382008494143224724813997867677412471553663707627071785909035704568631651364857831337201162759236631027208656540653116238608951459658720797097004961855272302806833245502158874737056275501088728653856067866862236652871019762699459567395041095672590129880894791948184852009243077547912930194719587864508301425245256681651245776785187307517802263787573490437316405588086034623906500000806128654367047978594023899120489543531
p = 9374932709587334546717919879870679681133352097640951312884735884903363130733845483872166630489920100577669564007040722766135601367657074594382388253585092317129254564677368584288746778651205668347224176423137571286321258589923729729850296874815094391607400538983151202497604195872900043679540627898795076068310527340889814605486607200787609344275704500106948683637908194266483903919625625022235092376768055478235145764773358306148283416369161502160021488067263061245781637007206422700350183452982067
A = 664249085141954914010793883156938750222587261439096261801413536850416036774656969553385207822437308826473407933610444198164864013751259270421357512548632854044020992643475071810092985125678212069361080605812969993136051206644358059866133497631667577094055678198220060678931660881499299326427111146870533522776509065953472937178615578970249164429384546242306789529516488734563327111653549438198134644567814486120152995776724589814301037197531802885105926630701566591484249844122297598494476299550872


c1 = 2718133313690959124621163502043547325784851596476526258199906953371521313936528303972651115542177599515414840761276912431678330944239940411019960638290360557421125176155673209375382393330530690456092229692692940116472360938375136439104330394468145281251682846557343102801463332962505257576894838195627071701773689848069952072320112162404556858587590902624014032135082384317920381858132344788116155993068727361159698134805434183828354586100081884667121969942410049487295815169834293942635336756210646
c2 = 6894410998036194419039367379139663473018415491739930797163902846278360864653120558381626299867887043234562175181010688466005707611704214042171894839636126962892585673880062057114068208951365199255445500613236179126002925480883366806762386821165130660583891708040505294608210265617445906525412165577135250837126590357754640146860711934008288260663245177056770640268764559843820752248529365118740283996752421358704958518848161295952849223332079729893073213804792669812126308053676621185599248699239205



ord = 17943876824085968296573738018121801
q1 = 268850671
e1 = 3
q2 = 923385191
q1_e1 = pow(q1, 3)
q1_2 = pow(q1, 2)


A1 = pow(A, ord//q1_e1, p)
g1 = pow(g, ord//q1_e1, p)

r = pow(g1, q1_2, p)
A1_q1 = pow(A1, q1_2, p)

X0 = 224267126
X0_inv = ModularInverse(X0, q1_e1)
print((X0_inv*X0) % q1_e1)

# b = pow(g1, X0_inv, p)
# print(pow(b, X0, p) == g1)
#
# X1 = BSGS(r, pow(A1*b, q1, p), p, True, q1)
# print(X1)

Y0 = BSGS(g1, A1, p, True, q1_e1)



A2 = pow(A, ord//q2, p)
g2 = pow(g, ord//q2, p)

Y1 = 602395184
# Y1 = BSGS(g2, A2, p, True, q2)

a = ChineseRemainder([Y0, Y1], [q1_e1, q2])

m = (c2 * ModularInverse(pow(c1, a, p), p))
print(NumToString(m))






